{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","components/layout/Page.tsx","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","config/constants/types.ts","config/constants/contracts.ts","contexts/BlockContext.tsx","utils/multicall.ts","config/constants/pools.ts","utils/addressHelpers.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","starPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","usePriceCakeBusd","usePriceWethBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","BNB","CAKE","plus","getNodeUrl","RefreshContext","React","createContext","slow","fast","ultra","RefreshContextProvider","children","useState","setSlow","setFast","setUltra","interval","setInterval","prev","clearInterval","Provider","useContext","ultraRefresh","Page","styled","Container","theme","mediaQueries","sm","lg","defaultTranslationState","translations","setTranslations","TranslationsContext","PoolCategory","cake","56","97","137","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","usdt","weth","forest","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","sousId","tokenName","stakingTokenName","STAR","stakingTokenAddress","contractAddress","rewardTokenAddress","poolCategory","COMMUNITY","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","burnFee","weeklyroi","getCakeAddress","addresses","chainId","getLotteryAddress","getLotteryTicketAddress","getForestAddress","nonBnbPools","filter","p","bnbPools","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","cakePools","sousChefABI","cakeUserInfo","amount","fetchUserPendingRewards","poolsConfig","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","stakingTokenBalances","stakedBalances","pendingRewards","stakingTokenBalance","pendingReward","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","USDT","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","process","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.a5f13c70.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n    \r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      if (farmConfig.isTokenOnly) {\r\n      //     console.log('here2',\r\n      //   tokenDecimals,farmConfig\r\n      // )\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(6));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      }else{\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(6))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, starPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'starPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        starPerBlock: new BigNumber(starPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingEgg',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 1 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBnb = (): BigNumber => {\r\n  const pid = 14 // SALT-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0; // EGG-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const usePriceWethBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 13; // WETH-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  const wethPrice = usePriceWethBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }\r\n      // else if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n      //  val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      // }\r\n      else{\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n      value = value.plus(val);\r\n\r\n    }\r\n  }\r\n  return value;\r\n}","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  return \"https://ancient-falling-log.matic.quiknode.pro/b19f0f2ba7f61ca711f2c77f8d966f2c798854ef\";\r\n\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst ULTRA_INTERVAL = 3000\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0, ultra: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n  const [ultra, setUltra] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setUltra((prev) => prev + 1)\r\n    }, ULTRA_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast, ultra }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { ultra, fast, slow } = useContext(RefreshContext)\r\n  return { ultraRefresh: ultra, fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'USDT' = 'USDT',\r\n  'WETH' = 'WETH',\r\n  'STAR' = 'STAR',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n  137?: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: Address\r\n  contractAddress: Address\r\n  rewardTokenAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n  burnFee: number\r\n  weeklyroi: string\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0xbbe3005089f5979d4d90801d202a5335c93a1d4b',\r\n    97: '',\r\n    137: '0xbbe3005089f5979d4d90801d202a5335c93a1d4b', // STAR\r\n  },\r\n  masterChef: {\r\n    56: '0xa74a72a5d7d8fdc33337187c642dedd3af62a7b8',\r\n    97: '',\r\n    137: '0xa74a72a5d7d8fdc33337187c642dedd3af62a7b8' \r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n    137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270' // WMATIC\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n    137: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n    137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174' // USDC\r\n  },\r\n  usdt: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n    137: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F' // USDT\r\n  },\r\n  weth: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n    137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619' // WETH\r\n  },\r\n  forest: {\r\n    56: '',\r\n    97: '',\r\n    137: '0x4b17699c4990265D35875C15D5377571159f6bfd'\r\n  },\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import { PoolCategory, PoolConfig, QuoteToken } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\r\n  //     56: '0xfC2BA5B6Ec7A5Fe68546fC8fB55A915b5CA5E261', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\r\n  //     56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', // CAKE\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.00295',\r\n  //   sortOrder: 1,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'WBNB',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0x8eAFF0bF4C7e8a9aA3cFe13e2B4533D23251fdaF', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had WBNB\r\n  //     56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', // WBNB\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://binance.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.0001736111111',\r\n  //   sortOrder: 2,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 2,\r\n  //   tokenName: 'SLME',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0xFC4A74E326F34dA2954F8B0De39A759e14B5472f', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had SLIME\r\n  //     56: '0x4fcfa6cc8914ab455b5b33df916d90bfe70b6ab1', // SLIME\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://slime.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.00496031746',\r\n  //   sortOrder: 3,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 3,\r\n  //   tokenName: 'BUSD',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0x1495989d4592c7e94fe1E9448A172894f179956E', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://binance.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.694',\r\n  //   sortOrder: 4,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 4,\r\n  //   tokenName: 'EGG',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0x2974b4aECbEc5FFEA565E7Ef47395429f44D0c81', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6', // EGG\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://goosedefi.com',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.002624734287',\r\n  //   sortOrder: 5,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 5,\r\n  //   tokenName: 'BREW',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0x88d2fb892c9577Ecb542EF6860AF13524e668b02', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0x790be81c3ca0e53974be2688cdb954732c9862e1', // BREW\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://cafeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.005006944444',\r\n  //   sortOrder: 6,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 6,\r\n  //   tokenName: 'BUSD',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0x36e3BC1E58B409160A191784E21327ACA6AcBc5C', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://binance.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.3863194444',\r\n  //   sortOrder: 7,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 5,\r\n  // },\r\n  // {\r\n  //   sousId: 7,\r\n  //   tokenName: 'BTCB',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0xe2f75e1e327331c41a206D187f4D08F75FA9bF17', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c', // BTCB\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://binance.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.000006944444444',\r\n  //   sortOrder: 8,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 5,\r\n  // },\r\n  // {\r\n  //   sousId: 8,\r\n  //   tokenName: 'CTC',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0xa0286abcdf5ac136cdbea4fecea0f83c093e5107',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xFD8fa2A7a5DebB757C1CDe08B113DF395A774160', // test ctc\r\n  //     56: '0x85f27A63cFb4Dc5a36d7Eb5EF8620D343817e156', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xAA8Af527961533Ba61CeF965ED750060d459a918', // FAKECTC\r\n  //     56: '0xb7F80a74aaA4FD30a3EE7C03FDe3DC88e6002C12', // CTC\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://www.cryptocoinctc.org/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.8680538',\r\n  //   sortOrder: 9,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 8,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 9,\r\n  //   tokenName: 'BUSD',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0xc44E823f72f6d038BC255cD82A48B3942B00c2Ef', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://binance.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.1736111111',\r\n  //   sortOrder: 10,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 10,\r\n  // },\r\n  // {\r\n  //   sousId: 10,\r\n  //   tokenName: 'CTC',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0xa0286abcdf5ac136cdbea4fecea0f83c093e5107',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xFD8fa2A7a5DebB757C1CDe08B113DF395A774160', // test ctc\r\n  //     56: '0xf1eFc9e49EB1805AEd72917a0479bddFB5560d32', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xAA8Af527961533Ba61CeF965ED750060d459a918', // FAKECTC\r\n  //     56: '0xb7F80a74aaA4FD30a3EE7C03FDe3DC88e6002C12', // CTC\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://www.cryptocoinctc.org/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.8680538',\r\n  //   sortOrder: 11,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 8,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 11,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\r\n  //     56: '0x0A30d83b4396F34b25EB1956a79FabB5d3BaB931', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\r\n  //     56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', // CAKE\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.003681388889',\r\n  //   sortOrder: 12,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 15,\r\n  // },\r\n  // {\r\n  //   sousId: 12,\r\n  //   tokenName: 'WBNB',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0xA5e2C1ABc73F411180e0a2371a3A546B402A96F9', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had WBNB\r\n  //     56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', // WBNB\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://binance.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.00005541666667',\r\n  //   sortOrder: 13,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 15,\r\n  // },\r\n  // {\r\n  //   sousId: 13,\r\n  //   tokenName: 'BLUE',\r\n  //   stakingTokenName: QuoteToken.SALTBLUE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0xc7953f27b4b7049e41c3c10354e995870cb8e109', // CAKE-BLUE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0xdF62141c12f54B17B7e6F158eD36629856E74C97', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had WBNB\r\n  //     56: '0x36C0556c2B15aED79F842675Ff030782738eF9e8', // BLUE\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://blueswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.005787037037',\r\n  //   sortOrder: 14,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 0,\r\n  // },\r\n  // {\r\n  //   sousId: 14,\r\n  //   tokenName: 'SLME',\r\n  //   stakingTokenName: QuoteToken.SALTSLME,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0xbea4674a61cccc6b735999511ba9a8ba3aa26a85', // CAKE-slime\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0xD4A55D437Da5753da2f937518Fd797f5d2211E1c', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had SLIME\r\n  //     56: '0x4fcfa6cc8914ab455b5b33df916d90bfe70b6ab1', // SLIME\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://slime.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '.002899305556',\r\n  //   sortOrder: 15,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 30,\r\n  // },\r\n  // {\r\n  //   sousId: 15,\r\n  //   tokenName: 'BUSD',\r\n  //   stakingTokenName: QuoteToken.SALTBUSD,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x6596f770786915556C47E301cC8290aa14288d99', // CAKE-BUSD\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0x94fcecEdBe1050d079c60b1EDeb1D4D16B3BF76C', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://binance.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.01261865625',\r\n  //   sortOrder: 16,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 100,\r\n  // },\r\n  // {\r\n  //   sousId: 16,\r\n  //   tokenName: 'MOMO',\r\n  //   stakingTokenName: QuoteToken.SALTMOMO,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2e63a08ca1ab08a3f1eb0ca0d3f0a1a4278dfa8f', // CAKE-MOMO\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0xb72893D5ABFce5940F3f8F401eFCdb2A95E5f7c7', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0xafb2997fe9a99022e61c7e01b974e0e3d7704b02', // MOMO\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://momoprotocol.finance/#/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.01157407407',\r\n  //   sortOrder: 16,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 5,\r\n  // },\r\n  // {\r\n  //   sousId: 17,\r\n  //   tokenName: 'PALM',\r\n  //   stakingTokenName: QuoteToken.SALTPALM,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x34951e9ca4891b4264a6cb9850e0b85a850414e5', // CAKE-PALM\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\r\n  //     56: '0x42187c7eada603198165c2B95EA237865036BEd1', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\r\n  //     56: '0x9768E5b2d8e761905BC81Dfc554f9437A46CdCC6', // PALM\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://yieldbay.finance',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.00744047619',\r\n  //   sortOrder: 16,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 10,\r\n  // },\r\n  // {\r\n  //   sousId: 18,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\r\n  //     56: '0x59f2B754944e78f849E03db39273da9251ADbF0E', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\r\n  //     56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', // CAKE\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.001191340278',\r\n  //   sortOrder: 17,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 15,\r\n  // },\r\n  // {\r\n  //   sousId: 19,\r\n  //   tokenName: 'MCH',\r\n  //   stakingTokenName: QuoteToken.SALTMCH,\r\n  //   stakingTokenAddress: {\r\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\r\n  //     56: '0xf09a33f69c7f9a19f87c53469b52665ec4e1c97b', // CAKE-MCH\r\n  //   },\r\n  //   contractAddress: {\r\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\r\n  //     56: '0x01c1e411D447e9d18D95C05408A7e765Ec308D48', // SmartChef\r\n  //   },\r\n  //   rewardTokenAddress: {\r\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\r\n  //     56: '0x46483f3a766ae2c0c811ff953ac3dc69a3a20968', // MCH\r\n  //   },\r\n  //   poolCategory: PoolCategory.COMMUNITY,\r\n  //   projectLink: 'https://magnifico-chef-git-main-chefmagnifico.vercel.app/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.0162037037',\r\n  //   sortOrder: 18,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  //   burnFee: 10,\r\n  // },\r\n  {\r\n    sousId: 20,\r\n    tokenName: 'WMATIC',\r\n    stakingTokenName: QuoteToken.STAR,\r\n    stakingTokenAddress: {\r\n      137: '0xF4B0903774532AEe5ee567C02aaB681a81539e92',\r\n      97: '',\r\n      56: '', // STAR\r\n    },\r\n    contractAddress: {\r\n      137: '0x5ED37920412415B1d2F0F25e44776F0BE709B4e3',\r\n      97: '',\r\n      56: '', // SmartChef\r\n    },\r\n    rewardTokenAddress: {\r\n      137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      97: '', // DAI, didnt had WBNB\r\n      56: '', // WMATIC\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    projectLink: 'https://polygon.technology/',\r\n    harvest: true,\r\n    tokenPerBlock: '0.0165343915343915',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n    tokenDecimals: 18,\r\n    burnFee: 100,\r\n    weeklyroi: '~ 60%'\r\n  }, \r\n  {\r\n    sousId: 21,\r\n    tokenName: 'ELK',\r\n    stakingTokenName: QuoteToken.STAR,\r\n    stakingTokenAddress: {\r\n      137: '0xF4B0903774532AEe5ee567C02aaB681a81539e92',\r\n      97: '',\r\n      56: '', // STAR\r\n    },\r\n    contractAddress: {\r\n      137: '0x85Ac6e29ee5Ab7665701CfdCC443dF50d5E67e74',\r\n      97: '',\r\n      56: '', // SmartChef\r\n    },\r\n    rewardTokenAddress: {\r\n      137: '0xE1C8f3d529BEa8E3fA1FAC5B416335a2f998EE1C', // ELK\r\n      97: '', // DAI, didnt had WBNB\r\n      56: '', // WMATIC\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    projectLink: 'https://elk.finance/',\r\n    harvest: true,\r\n    tokenPerBlock: '0.002662037037037',\r\n    sortOrder: 2,\r\n    isFinished: false,\r\n    tokenDecimals: 18,\r\n    burnFee: 100,\r\n    weeklyroi: 'Starting Saturday 13:30 UTC'\r\n  },\r\n]\r\n\r\nexport default pools\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n\r\nexport const getForestAddress = () => {\r\n  return addresses.forest[chainId]\r\n}","import pools from 'config/constants/pools'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = pools.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = pools.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst web3 = getWeb3()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress[CHAIN_ID],\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress[CHAIN_ID],\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const cakePools = pools\r\n  const cakeUserInfo = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((p) => ({\r\n      address: p.contractAddress[CHAIN_ID],\r\n      name: 'userInfo',\r\n      params: [account],\r\n    })),\r\n  )\r\n\r\n  return {\r\n    ...pools.reduce(\r\n      (acc, pool, index) => ({\r\n        ...acc,\r\n        [pool.sousId]: new BigNumber(cakeUserInfo[index]?.amount._hex).toJSON(),\r\n      }),\r\n      {},\r\n    ),\r\n  }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const cakePools = pools\r\n  const res = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((p) => ({\r\n      address: p.contractAddress[CHAIN_ID],\r\n      name: 'pendingReward',\r\n      params: [account],\r\n    })),\r\n  )\r\n\r\n  return {\r\n    ...pools.reduce(\r\n      (acc, pool, index) => ({\r\n        ...acc,\r\n        [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n      }),\r\n      {},\r\n    ),\r\n  }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index]?.userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'STAR - USDC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\r\n      137: '0x99dADf889520b9cEBD9959d3ca1866DC2517Ea1d',\r\n    },\r\n    tokenSymbol: 'STAR',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n      137: '0xF4B0903774532AEe5ee567C02aaB681a81539e92',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 14,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'STAR - MATIC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\r\n      137: '0x8BaFdF3a3fAEF45A08D2bc065e736D3D8c6FDFE7',\r\n    },\r\n    tokenSymbol: 'STAR',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n      137: '0xF4B0903774532AEe5ee567C02aaB681a81539e92',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 11,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'STAR - USDT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\r\n      137: '0x16787a6ec81607c8032cb03522a4d5f2a544f293',\r\n    },\r\n    tokenSymbol: 'STAR',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n      137: '0xF4B0903774532AEe5ee567C02aaB681a81539e92',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.USDT,\r\n    quoteTokenAdresses: contracts.usdt,\r\n  },\r\n  {\r\n    pid: 13,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'WETH - USDC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\r\n      137: '0x853ee4b2a13f8a742d64c8f088be7ba2131f670d',\r\n    },\r\n    tokenSymbol: 'WETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n      137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 1,\r\n    risk: 3,\r\n    lpSymbol: 'WMATIC - USDC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827', // WMATIC - USDC\r\n    },\r\n    tokenSymbol: 'WMATIC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', // WMATIC\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 2,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'STAR',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\r\n      137: '0x99dADf889520b9cEBD9959d3ca1866DC2517Ea1d', // KRILL - USDC\r\n    },\r\n    tokenSymbol: 'STAR',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n      137: '0xF4B0903774532AEe5ee567C02aaB681a81539e92',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n  {\r\n    pid: 3,\r\n    isTokenOnly: true,\r\n    risk: 3,\r\n    lpSymbol: 'WMATIC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827', // WMATIC - USDC\r\n    },\r\n    tokenSymbol: 'MATIC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', // WMATIC\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 10,\r\n    isTokenOnly: true,\r\n    risk: 3,\r\n    lpSymbol: 'MUST',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0x12A2aBcFcADc04681929F0c199bDf812967207E4', // WMATIC - USDC\r\n    },\r\n    tokenSymbol: 'MUST',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0x9c78ee466d6cb57a4d01fd887d2b5dfb2d46288f', // WMATIC\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 4,\r\n    isTokenOnly: true,\r\n    risk: 3,\r\n    lpSymbol: 'WBTC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0xf6a637525402643b0654a54bead2cb9a83c8b498', // WBTC - USDC\r\n    },\r\n    tokenSymbol: 'WBTC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6', // WBTC\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 5,\r\n    isTokenOnly: true,\r\n    risk: 3,\r\n    lpSymbol: 'WETH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0x853ee4b2a13f8a742d64c8f088be7ba2131f670d', // ETH - USDC\r\n    },\r\n    tokenSymbol: 'WETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619', // ETH\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 6,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'KRILL',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\r\n      137: '0x6405ebc22cb0899fc21f414085ac4044b4721a0d', // KRILL - USDC\r\n    },\r\n    tokenSymbol: 'KRILL',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n      137: '0x05089C9EBFFa4F0AcA269e32056b1b36B37ED71b',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 7,\r\n    isTokenOnly: true,\r\n    risk: 3,\r\n    lpSymbol: 'USDC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0x2cf7252e74036d1da831d11089d326296e64a728', // USDC - USDC\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', // USDC\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 9,\r\n    isTokenOnly: true,\r\n    risk: 3,\r\n    lpSymbol: 'USDT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0x2cf7252e74036d1da831d11089d326296e64a728', // USDT - USDC\r\n    },\r\n    tokenSymbol: 'USDT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f', // USDT\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 12,\r\n    isTokenOnly: true,\r\n    risk: 1,\r\n    lpSymbol: 'AAVE',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\r\n      137: '0x0554059d42e26f35cc958581c71fdfd92405d02f', // AAVE - USDC\r\n    },\r\n    tokenSymbol: 'AAVE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n      137: '0xd6df932a45c0f255f85145f286ea0b292b21c90b', // AAVE\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n]\r\n\r\nexport default farms\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @font-face {\r\n    font-family: 'MyWebFont';\r\n    src: url('Font.ttf') format('truetype');\r\n  }\r\n\r\n  * {\r\n    font-family: 'MyWebFont';\r\n  }\r\n  body {\r\n    background-image: url(\"starseed/bg.jpg\");\r\n\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    h2 {\r\n      color: white!important;\r\n    }\r\n\r\n    h1 {\r\n      color: white!important;\r\n    }\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Pools',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n  {\r\n    label: 'Docs',\r\n    icon: 'InfoIcon',\r\n    href: 'Https://docs.starseed.exchange/'\r\n  },\r\n  {\r\n    label: 'Audit',\r\n    icon: 'InfoIcon',\r\n    href: 'https://solidity.finance/audits/StarSeed/'\r\n  }  \r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd}\r\n      links={config}\r\n      priceLink=\"https://explorer-mainnet.maticvigil.com/tokens/0xF4B0903774532AEe5ee567C02aaB681a81539e92/\"\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\nconst Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\nconst Buy = lazy(() => import('./views/Buy'))\r\nconst Trade = lazy(() => import('./views/BuyNow'))\r\nconst Liquidity = lazy(() => import('./views/Liquidity'))\r\nconst Launchpad = lazy(() => import('./views/Teaser'))\r\nconst KingOfElephants = lazy(() => import('./views/KingOfElephants'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      \r\n\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nconst isAddress = (address: string) => {\r\n  return Web3.utils.isAddress(address)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider, isAddress }\r\n"],"sourceRoot":""}