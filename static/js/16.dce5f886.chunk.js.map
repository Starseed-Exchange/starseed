{"version":3,"sources":["hooks/useHarvest.ts","utils/erc20.ts","views/Home/components/CardValue.tsx","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/WinCard.tsx","views/Home/components/Timer.tsx","views/Home/components/Metamask.tsx","views/Home/Home.tsx"],"names":["useHarvest","farmPid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onReward","useCallback","a","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSmartChefHarvest","sousId","isUsingBnb","smartChefContract","useSmartChef","handleHarvest","harvestFn","smartHarvestBnb","smartHarvest","updateUserPendingReward","updateUserBalance","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTokenBalance","_account","_provider","useAccount","ethereum","fastRefresh","currentProvider","res","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","pow","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","starPerBlock","burnValue","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","cakePrice","bnbPrice","usePriceBnbBusd","wethPrice","usePriceWethBusd","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","BLOCKS_PER_YEAR","cakeRewardPerYear","poolWeight","apy","quoteTokenSymbol","QuoteToken","BNB","WETH","comparedTo","max","exact","activeClassName","to","Number","animation","variant","justifyContent","mt","EarnAssetCard","WinCard","daySeconds","TimerBox","Timer","remainingTime","Date","now","Math","ceil","TokenImageWrapper","token","addWatchJaguarToken","window","request","method","type","symbol","image","console","log","flexDirection","small","href","marginLeft","Hero","Cards","BaseLayout","sm","CTACards","Home","Cookies","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/16.dce5f886.chunk.js","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest\r\n    await harvestFn(smartChefContract, account)\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport {getLotteryAddress, getCakeAddress} from 'utils/addressHelpers'\r\nimport multicall from 'utils/multicall'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport useRefresh from './useRefresh'\r\n\r\n// const useTokenBalance = (tokenAddress: string) => {\r\n//   const [balance, setBalance] = useState(new BigNumber(0))\r\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n//   const { fastRefresh } = useRefresh()\r\n//\r\n//   useEffect(() => {\r\n//     const fetchBalance = async () => {\r\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n//       setBalance(new BigNumber(res))\r\n//     }\r\n//\r\n//     if (account && ethereum) {\r\n//       fetchBalance()\r\n//     }\r\n//   }, [account, ethereum, tokenAddress, fastRefresh])\r\n//\r\n//   return balance\r\n// }\r\n\r\nconst useTokenBalance = (tokenAddress: string, _account?: string, _provider?: any) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account: useAccount, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const account = _account || useAccount;\r\n  const currentProvider = _provider || ethereum;\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(currentProvider, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && currentProvider) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, currentProvider, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useLotteryLockedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const burnAddress = getLotteryAddress()\r\n      const [burnedCakeBalance] = await multicall(erc20, [\r\n        {\r\n          address: tokenAddress,\r\n          name: 'balanceOf',\r\n          params: [burnAddress],\r\n        },\r\n      ])\r\n\r\n      if (!burnedCakeBalance) return\r\n\r\n      setBalance(new BigNumber(burnedCakeBalance))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [slowRefresh, tokenAddress])\r\n\r\n  if (!balance) {\r\n    return new BigNumber(0)\r\n  }\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingEgg',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({cakeBalance}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\r\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'STAR to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'STAR in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n  let starPerBlock = 0;\r\n  const burnValue = eggPrice.times(burnedBalance);\r\n  const cakePrice = usePriceCakeBusd();\r\n  if(farms && farms[0] && farms[0].starPerBlock){\r\n    starPerBlock = new BigNumber(farms[0].starPerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'STAR Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">STAR Price</Text>\r\n          <CardValue fontSize=\"14px\" value={eggPrice.toNumber()} decimals={2} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Maximum Mint</Text>\r\n          <Text bold fontSize=\"14px\">3,888,000</Text>\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Total Minted</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Circulating Supply</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total STAR Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Burn Value</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnValue)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New STAR/block')}</Text>\r\n          <Text bold fontSize=\"14px\">{starPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'polygaj'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceWethBusd } from 'state/hooks'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n    const farms = useFarms()\r\n    const cakePrice = usePriceCakeBusd()\r\n    const bnbPrice = usePriceBnbBusd()\r\n    const wethPrice = usePriceWethBusd()\r\n\r\n    const highestApr = useMemo(() => {\r\n        const aprs = farms\r\n            // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n            .filter((farm) => farm.multiplier !== '0X')\r\n            .map((farm) => {\r\n                if (farm.lpTotalInQuoteToken) {\r\n                    const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\n                    const cakeRewardPerBlock = new BigNumber(farm.starPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\r\n                    const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n                    let apy = cakePrice.times(cakeRewardPerYear);\r\n                    let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n                    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n                        totalValue = totalValue.times(bnbPrice);\r\n                    } else if (farm.quoteTokenSymbol === QuoteToken.WETH) {\r\n                        totalValue = totalValue.times(wethPrice);\r\n                    }\r\n\r\n                    if (totalValue.comparedTo(0) > 0) {\r\n                        apy = apy.div(totalValue);\r\n                    }\r\n                    return { apy }\r\n                }\r\n                return null\r\n            })\r\n        const maxApr = max(aprs)\r\n        return maxApr\r\n    }, [cakePrice, bnbPrice, wethPrice, farms])\r\n\r\n    return (\r\n        <StyledFarmStakingCard>\r\n            <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n                <CardBody>\r\n                    <Heading color=\"contrast\" size=\"lg\">\r\n                        Earn up to\r\n                    </Heading>\r\n                    <CardMidContent color=\"secondary\">\r\n                        {highestApr ? `${Number(highestApr.apy.toNumber() * 100).toFixed(2)}% ${'APR'}` : <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />}\r\n                    </CardMidContent>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Heading color=\"contrast\" size=\"lg\">\r\n                            in Farms\r\n                        </Heading>\r\n                        <ArrowForwardIcon mt={30} color=\"primary\" />\r\n                    </Flex>\r\n                </CardBody>\r\n            </NavLink>\r\n        </StyledFarmStakingCard>\r\n    )\r\n}\r\n\r\nexport default EarnAPRCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#3B4155, #3A3045);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\n\r\n// const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\n// const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n// // Always include CAKE\r\n// const assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\nconst EarnAssetCard = () => {\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/pools\" id=\"pool-cta\">\r\n        <CardBody>\r\n          <Heading color=\"white\" size=\"lg\">\r\n            Stake\r\n          </Heading>\r\n          <CardMidContent color=\"white\">STAR, WETH, WBTC</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"white\" size=\"lg\">\r\n              in Pools\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"white\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\n// import { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst WinCard = () => {\r\n//   const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/buy\" id=\"lottery-pot-cta\">\r\n        <CardBody>\r\n          <CardMidContent color=\"secondary\">Buy STAR!</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" size=\"lg\" />\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default WinCard\r\n","\nimport React from 'react';\n// import { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport styled from 'styled-components'\n\nconst minuteSeconds = 60;\n  const hourSeconds = 3600;\n  const daySeconds = 86400;\n  \n  const timerProps = {\n    isPlaying: true,\n    size: 120,\n    strokeWidth: 15,\n    trailColor: \"#126e82\"\n  };\n  \n  const renderTime = (dimension, time) => {\n    return (\n      <div className=\"time-wrapper\">\n        <div className=\"time\">{time}</div>\n        <div>{dimension}</div>\n      </div>\n    );\n  };\n  \n  // eslint-disable-next-line no-bitwise\n  const getTimeSeconds = (time) => (minuteSeconds - time) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeDays = (time) => (time / daySeconds) | 0;\n\nconst TimerBox = styled.div`\n  display: flex;\n  justify-content: space-around;\n  font-family: sans-serif;\n  text-align: center;\n  padding-top: 20px;\n  margin-bottom: 40px;\n  `\nconst Timer = () => {\n\n\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n  const endTime = 1635532200; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  return (\n  <TimerBox>\n    {/* <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > hourSeconds, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > minuteSeconds, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > 0, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer> */}\n    </TimerBox>\n  )\n  \n};\n\nexport default Timer;","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/farm-space/astro.png');\n  background-size: 256px;\n  background-repeat: no-repeat;\n  background-position: bottom right;\n  min-height: 100%;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst TokenImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 0px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 0px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst token = getCakeAddress();\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const FarmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = FarmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  const addWatchJaguarToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: token,\n              symbol: 'STAR',\n              decimals: '18',\n              image: '/logo.png',\n            },\n          },\n        })\n\n        if (wasAdded) {\n          console.log('Token was added')\n        }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Add STAR\n        </Heading>\n        <Flex flexDirection=\"column\" mb=\"15px\">\n          <LinkExternal mb=\"20px\" small href={`https://explorer-mainnet.maticvigil.com/tokens/${token}`}>\n            {token}\n          </LinkExternal>\n        </Flex>\n        <TokenImageWrapper>\n          <CardImage src=\"/images/egg/9.png\" alt=\"Farm STAR logo\" width={60} height={60} />\n          <hr/>\n          <Button onClick={addWatchJaguarToken} size=\"sm\">\n            + Add STAR to <img style={{ marginLeft: 8 }} width={16} src=\"https://jaguarswap.com/images/tokens/metamask.png\" alt=\"metamask logo\" />\n          </Button>\n        </TokenImageWrapper>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Cookies from 'universal-cookie';\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport rot13 from '../../utils/encode'\r\n// import LotteryCard from './components/LotteryCard'\r\nimport { isAddress } from '../../utils/web3'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\nimport EarnAPRCard from './components/EarnAPRCard'\r\nimport EarnAssetCard from './components/EarnAssetCard'\r\nimport WinCard from './components/WinCard'\r\nimport Timer from './components/Timer'\r\nimport MetaMask from './components/Metamask'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/egg/3ba.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/logo11.jpg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n    const TranslateString = useI18n()\r\n    const cookies = new Cookies();\r\n\r\n    return (\r\n        <Page>\r\n            <Hero>\r\n                <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n                    StarSeed Exchange\r\n                </Heading>\r\n                <Text as=\"h2\">Welcome to the future</Text>\r\n            </Hero>\r\n              <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\" >\r\n                Time until farming ends\r\n              </Heading>\r\n            <Timer />\r\n            <div>\r\n                <Cards>\r\n                    <FarmStakingCard />\r\n                    <TwitterCard />\r\n                </Cards>\r\n                <CTACards>\r\n                    <EarnAPRCard />\r\n                    <EarnAssetCard />\r\n                    <WinCard />\r\n                </CTACards>\r\n                <Cards>\r\n                    <CakeStats />\r\n                    <TotalValueLockedCard />\r\n                    <MetaMask/>\r\n                </Cards>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}